Tree is a non linear data structure.

Terminology of tree.
-----------------------------
    1. Node
    2. Root`
    3. Parent
    4. Child
    5. Sibling - Have the same parent
    6. Leaf / Terminal Node - Don't have any Child.
    7. Internal Node - Not leaf node
    8. Edge - The connection or link between two nodes.
    9. Depth - The depth of a node in a tree is the number of edges from the root node to that particular node.
    10. Height: The height of a tree is the maximum depth among all the nodes in the tree. It represents the length of the longest path from the root node to any leaf node.
    11. Subtree: A subtree is a portion of a tree that consists of a node and its descendants, including all their children and further descendants.
    12. Forest: A forest is a collection of disjoint trees. In other words, it is a set of trees with no common root.
    Degree: The degree of a node is the number of children it has. A leaf node has a degree of 0, and a node with two children has a degree of 2.
    13. Ancestor: An ancestor of a node is any node that lies on the path from the root to that node, excluding the node itself.
    14. Descendant: A descendant of a node is any node reachable by following the edges downward from that node.


Types of Tree
-----------------
    1. Binary Tree -  A binary tree is a tree in which each node has at most two children.
        - BST - Binary Search Tree
        - Balanced Binary Tree: A balanced binary tree is a binary tree in which the heights of the left and right subtrees of any node differ by at most one. 
            -AVL(Adelson-Velskii and Landis)
            -Red/Black Tree
        - Threaded Binary Tree
        - Full Binary Tree:  In a full binary tree, every node has either zero or two children. This means that every level of the tree is completely filled, except possibly for the last level, which is filled from left to right.
        - Complete Binary Tree: A complete binary tree is similar to a full binary tree, but it may have missing nodes at the right end of the last level. In a complete binary tree, all levels except the last level are completely filled, and the last level is filled from left to right.
        -  Perfect Binary Tree: A perfect binary tree is a binary tree in which all interior nodes have two children, and all leaf nodes are at the same level. This means that every level of the tree is completely filled.
        - Binary Heap: A binary heap is a complete binary tree that satisfies the heap property. In a min-heap, for any node, the value of that node is less than or equal to the values of its children. In a max-heap, the value of each node is greater than or equal to the values of its children. Binary heaps are often used to implement priority queues.
    General Tree / N-ary Tree - Maximum child N
    ----------------------------
        1. M-way tree
        2. B tree / B+ Tree - Database Searching

BST (Binary Search Tree)
----------------------------
1. purpose - Searching
2. property - 
        Left < Root
        Right > Root
Creation of BST:
--------------------
    - Create BST Examples:
    - All 3 types of traversal recursive
    - Find tree height
    - Find min / max element from tree
    - insertion of an item using non recursive algorightm
    - deletion of an item.
------------------------------------------
Expression Tree
----------------------
    - Creation of expression tree
    - Create of expression tree from prefix and postfix

-Creation of BST using prefix/infix and postfix/infix combination
    Alphabets and numbers tree.

Threaded binary tree
--------------------

General Tree
-----------------
Max Child = M if order = M

MST -> Balanced -> B Tree

Rules for B Tree
--------------------
A B-tree is a self-balancing search tree data structure that maintains sorted data and allows efficient operations like search, insert, and delete. It is commonly used in databases and file systems due to its ability to handle large amounts of data efficiently. Here are the rules or properties that define a B-tree:

1. **Root property:** The root of the tree can have a minimum of 1 key value.

2. **Node property:** Each non-root internal node (except leaf nodes) can have a minimum of `ceil(m/2) - 1` key values and a maximum of `m - 1` key values, where `m` is the order of the B-tree.

3. **Leaf property:** All leaf nodes appear at the same level and contain a minimum of `floor(m/2)` key values and a maximum of `m - 1` key values.

4. **Key order property:** For any non-leaf node, the keys in the node are stored in non-decreasing order.

5. **Child property:** For each key value in a non-leaf node, there is a child subtree between two adjacent keys. The key values in the child subtree are greater than the left key and less than or equal to the right key.

6. **Balancing property:** All leaf nodes have the same depth, and the difference in height between any two subtrees is at most 1.

7. **Duplicate keys:** B-trees typically do not allow duplicate keys, but some variations may support it.

These rules ensure that a B-tree maintains a balanced structure, which enables efficient operations. The minimum number of keys in each node helps keep the tree balanced, and the order property ensures efficient searching and insertion.

B-trees provide logarithmic time complexity for search, insert, and delete operations, making them efficient for large datasets. The self-balancing nature of B-trees allows them to handle dynamic changes in the data effectively.

It's important to note that there can be variations in the exact definitions and properties of B-trees, such as B+ trees, which have additional characteristics like storing keys only in the leaf nodes and using a linked list structure for efficient range queries.
